# Blurred Programming Language Grammar (BNF)

# Program structure
> <program>
/ ''

<program> ::= <declaration-list>
<declaration-list> ::= <declaration-list> <declaration> |
                       <declaration>


<declaration> := <data-declaration> |  
                 <fun-declaration>

# Data declarations
# ----------------------------------------------------------------------------------------

#Vars
<data-declaration> ::= <data-declaration-init-list> | 
                       <data-declaration-noinit-list> 

<data-declaration-noinit-list> ::= <data-declaration-noinit-list> <data-declaration-noinit> ; |
                                   <data-declaration-noinit> ;

<data-declaration-init-list> ::= <data-declaration-init-list> <data-declaration-init> ; |
                                 <data-declaration-init> ;

<data-declaration-noinit> ::= <type-specifier> name |
                              <type-specifier> name if <expression> |
                              struct name { <data-declaration-noinit-list> }

<data-declaration-init> ::= <type-specifier> name = <expression> 

<type-specifier> ::= <base-type> <array-declaration> |
                     <base-type>

<array-declaration> ::= <array-declaration> [ numeral ] |
                        [ numeral ]

<base-type> ::= bit |
                list { <type-specifier> } |
                void |
                name

# Functions 
<fun-declaration> ::= <type-specifier> name ( <params> ) { <statement> }

<params> := <param-list> | ''

<param-list> :: <param-list> , <param> | <param>

<param> ::= <type-specifier> name

# Statements
<statement> ::= <expression-statement> |   
                <compound-statement> |
                <if-statement> |
                <return-statement> |
                <for-statement> |
                <while-statement> |
                <return-statement> |
                <break-statement>

<expression-statement> ::= <expression> ; | ;

<compound-statement> ::= { <statement-list> }

<statement-list> ::= <statement-list> <statement> | ''

<if-statement> ::= if ( <expression> ) <statement> |
                   if ( <expression> ) <statement> else <statement>

<return-statement> ::= return ; |
                       return <expression> ;

<break-statement> ::= break ;

<while-statement> ::= while ( <expression> ) statement |
                      foreach ( <mutable> in name )

# Expressions
<expression> ::= <mutable> = <expression> |
                 <simple-espression>

<simple-expression> ::= <simple-expression> <bin-operator-1> <simple-term> |
                        <simple-term>

<simple-term> ::=  <simple-term> <bin-operator-2> <factor> |
                   <factor>

<factor> := ( <simple-expression> ) |
             <un-operator> |
             <constant> |
             <call>

<call> ::= name ( <args> )

<args> ::= <arg-list> | ''

<arg-list> ::= <arg-list> , <arg> | <arg>

<arg> ::= <expression>

<constant> ::= numeral | 
               literal |
               true |
               false

